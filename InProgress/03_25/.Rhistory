wrist_uw=amp_means[3,16:22]
t.test(wirst_aw,wrist_uw,paired=T)
t.test(wrist_aw,wrist_uw,paired=T)
cont_means=tapply(control$mm,list(control$init2,comtrol$ah_uh),mean,NA.RM=T)
cont_means=tapply(control$mm,list(control$init2,control$ah_uh),mean,NA.RM=T)
View(cont_means)
View(control)
cont_means=tapply(control$mm,list(control$initials,control$ah_uh),mean,NA.RM=T)
View(cont_means)
cont_means=tapply(control$mm,list(control$initials,control$ah_uh)mean,NA.RM=T)
View(cont_means)
View(amp_means)
cont_means=tapply(control$mm,list(control$initials,control$ah_uh)mean,NA.RM=T)
cont_means=tapply(control$mm,list(control$initials,control$ah_uh),mean,NA.RM=T)
warnings()
View(control)
class(control$ah_uh)
class(control$mm)
control$mm=as.factor(control$mm)
cont_means=tapply(control$mm,list(control$initials,control$ah_uh),mean,NA.RM=T)
warnings()
control$mm=as.numeric(control$mm)
cont_means=tapply(control$mm,list(control$initials,control$ah_uh),mean,NA.RM=T)
View(cont_means)
View(cont_means)
control=read.table("master_control.csv",header=T,sep=",")
levels(control$ah_uh)=c("Affected Hand", "Unaffected Hand")
levels(control$ah_uh_control)=c("Unaffected Hand")
class(control$mm)
control$mm=as.numeric(control$mm)
control$mm=as.numeric(control$mm)
cont_means=tapply(control$mm,list(control$initials,control$ah_uh_control),mean,NA.RM=T)
View(cont_means)
cont_means=tapply(control$mm,list(control$ah_uh_control,control$initials),mean,NA.RM=T)
View(cont_means)
class(wrist_aw)
cont_means=tapply(control$mm,list(control$ah_uh_control,control$initials),mean,NA.RM=T)
x=cont_means[1,]
x
class(x)
cont_means=tapply(control$mm,list(control$initials,control$ah_uh_control),mean,NA.RM=T)
y=cont_means[1,]
y
cont_means=tapply(control$mm,list(control$initials,control$ah_uh_control),mean,NA.RM=T)
y=cont_means[,1]
class(y)
y
View(cont_means)
View(cont_means)
control$mm=as.numeric(control$mm)
cont_means=tapply(control$mm,list(control$ah_uh_control,control$initials),mean,NA.RM=T)
cont_hand=cont_means[1,]
amp_hands=amp_means[2,c(1:11,14:22)]
amp_hands
length(amp_hands)
length(cont_hand)
control$mm=as.numeric(control$mm)
cont_means=tapply(control$mm,list(control$ah_uh_control,control$initials),mean,NA.RM=T)
cont_hands=cont_means[1,]
amp_hands=amp_means[2,c(1:11,14:22)]
t.test(cont_hands,amp_hands)
View(amp_means)
View(cont_means)
cont_means
plot(control$mm)
cont_means=tapply(control$mm,list(control$ah_uh,control$initials),mean,NA.RM=T) #find means of controls locognosia scores per subject
cont_means
mean(control$mm)
View(control)
control=read.table("master_control.csv",header=T,sep=",")
View(control)
levels(control$ah_uh)=c("Affected Hand", "Unaffected Hand")
levels(control$ah_uh_control)=c("Unaffected Hand")
View(control)
control$mm=as.numeric(control$mm)
View(control)
control=read.table("master_control.csv",header=T,sep=",")
levels(control$ah_uh)=c("Affected Hand", "Unaffected Hand")
levels(control$ah_uh_control)=c("Unaffected Hand")
class(control$mm)
control$mm[1]
control$mm=numeric(control$mm)
View(control)
View(amputee)
class(amp$mm)
class(amputee$mm)
control=read.table("master_control.csv",header=T,sep=",")
controlmean=read.table("controlmean.csv",header=T,sep=",")
levels(control$ah_uh)=c("Affected Hand", "Unaffected Hand")
levels(control$ah_uh_control)=c("Unaffected Hand")
class(ocntrol$mm)
class(control$mm)
class(amputee$mm)
cont_means=tapply(control$mm,list(control$ah_uh,control$initials),mean,NA.RM=T) #find means of controls locognosia scores per subject
cont_hands=cont_means[1,] #store hand means in a variable
amp_hands=amp_means[2,c(1:11,14:22)] #store amp hand means in var
t.test(cont_hands,amp_hands)
cont_means=tapply(control$mm,list(control$ah_uh_control,control$initials),mean,NA.RM=T) #find means of controls locognosia scores per subject
cont_hands=cont_means[1,] #store hand means in a variable
amp_hands=amp_means[2,c(1:11,14:22)] #store amp hand means in var
t.test(cont_hands,amp_hands)
amp_means
age_amp=c(42,62,46,58,43,67,31,64,43,56,56,47,61,86,38,52,29,37,20,65,32,50)
gender_amp=c(m,m,f,m,m,f,f,f,f,m,m,m,m,m,f,m,m,f,m,m,m,m)
age_amp=c(42,62,46,58,43,67,31,64,43,56,56,47,61,86,38,52,29,37,20,65,32,50)
gender_amp=c("m","m","f","m","m","f","f","f","f","m","m","m","m","m","f","m","m","f","m","m","m","m")
plot(amp_means[1,],age_amp)
plot(age_ampamp_means[1,])
plot(age_amp,amp_means[1,])
cor(age_amp,amp_means[1,])
corr(age_amp,amp_means[1,])
x=c(1,2,3)
y=c(4,5,6)
cor(x,y)
plot(age_amp,amp_means[2,]) #plot of age and uh mean loc
plot(age_amp,amp_means[1,]) #plot of age and aw mean loc
plot(age_amp,amp_means[3,]) #plot of age and uw mean loc
plot(gender_amp,amp_means[1,]) #plot of gender and aw mean loc
length(gender_amp)
barplot(gender_amp,amp_means[1,]) #plot of gender and aw mean loc
class(gender_amp)
gender_amp=as.factor(gender_amp)
barplot(gender_amp,amp_means[1,]) #plot of gender and aw mean loc
barplot(amp_means[1,],gender_amp) #plot of gender and aw mean loc
plot(amp_means[1,],gender_amp) #plot of gender and aw mean loc
plot(gender_amp,amp_means[1,]) #plot of gender and aw mean loc
plot(gender_amp,amp_means[2,]) #plot of gender and uh mean loc
plot(gender_amp,amp_means[3,]) #plot of gender and uw mean loc
setwd("~/Desktop/Locognosia/Analysis_NB/R")
require(lsr)
require(Hmisc)
require(ggplot2)
require(psych)
amputee=read.table("master_amputee.csv",header=T,sep=",")
control=read.table("master_control.csv",header=T,sep=",")
levels(amputee$ah_uh)=c("Affected Wrist","Unaffected Hand","Unaffected Wrist")
levels(amputee$ah_uh_control)=c("Affected Wrist","Unaffected Hand","Unaffected Wrist")
levels(control$ah_uh)=c("Affected Hand", "Unaffected Hand")
levels(control$ah_uh_control)=c("Unaffected Hand")
amp_means=tapply(amputee$mm,list(amputee$init2,amputee$ah_uh),mean,NA.RM=T)
wrist_aw=amp_means[1,16:22]
wrist_uw=amp_means[3,16:22]
t.test(wrist_aw,wrist_uw,paired=T)
amp_means
amp_means=tapply(amputee$mm,list(amputee$ah_uh,amputee$init2),mean,NA.RM=T)
amp_means
wrist_aw=amp_means[1,16:22]
wrist_uw=amp_means[3,16:22]
t.test(wrist_aw,wrist_uw,paired=T)
plot(wrist_aw,wrist_uw)
age_amp=c(42,62,46,58,43,67,31,64,43,56,56,47,61,86,38,52,29,37,20,65,32,50)
plot(age_amp,amp_means[1,]) #plot of age and aw mean loc
plot(age_amp,amp_means[2,]) #plot of age and uh mean loc
plot(age_amp,amp_means[3,]) #plot of age and uw mean loc
gender_amp=c("m","m","f","m","m","f","f","f","f","m","m","m","m","m","f","m","m","f","m","m","m","m")
x=amp_means[1,]
x
age_amp
cor(age_amp,x)
cor(age_amp,x,NA.RM=T)
x=age_amp[12:22]
y=amp_means[1,12:22]
cor(x,y)
amp_means
x_aw=age_amp[12:22]
y_aw=amp_means[1,12:22]
cor_aw=cor(x,y)
cor_aw
age_amp=c(42,62,46,58,43,67,31,64,43,56,56,47,61,86,38,52,29,37,20,65,32,50)
plot(age_amp,amp_means[1,]) #plot of age and aw mean loc
x_aw_age=age_amp[12:22]
y_aw=amp_means[1,12:22]
cor_aw_age=cor(x_aw_age,y_aw)
y_uh=amp_means[(1:11,14:22),]
x_uh_age=age_amp[c(1:11,14:22)]
y_uh=amp_means[c(1:11,14:22),]
y_uh=amp_means[2,c(1:11,14:22)]
y_uh
x_uw_age=age_amp[c(16:22)]
y_uw=amp_means[3,c(16:22)]
cor_uh_age=cor(x_uw,y_uw)
age_amp=c(42,62,46,58,43,67,31,64,43,56,56,47,61,86,38,52,29,37,20,65,32,50)
plot(age_amp,amp_means[1,]) #plot of age and aw mean loc
x_aw_age=age_amp[12:22]
y_aw=amp_means[1,12:22]
cor_aw_age=cor(x_aw_age,y_aw)
cor_aw_age
cor_aw_age=cor(x_aw_age,y_aw)
plot(age_amp,amp_means[2,]) #plot of age and uh mean loc
x_uh_age=age_amp[c(1:11,14:22)]
y_uh=amp_means[2,c(1:11,14:22)]
cor_uh_age=cor(x_uh_age,y_uh)
plot(age_amp,amp_means[3,]) #plot of age and uw mean loc
x_uw_age=age_amp[c(16:22)]
y_uw=amp_means[3,c(16:22)]
cor_uh_age=cor(x_uw_age,y_uw)
cor_aw_age
t.test(wrist_aw,wrist_uw,paired=T)
cont_means=tapply(control$mm,list(control$ah_uh_control,control$initials),mean,NA.RM=T) #find means of controls locognosia scores per subject
cont_hands=cont_means[1,] #store hand means in a variable
amp_hands=amp_means[2,c(1:11,14:22)] #store amp hand means in var
t.test(cont_hands,amp_hands)
cor_aw_age=cor(x_aw_age,y_aw)
cor_uh_age
cor_uh_age
cor_uw_age
plot(age_amp,amp_means[3,]) #plot of age and uw mean loc
x_uw_age=age_amp[c(16:22)]
y_uw=amp_means[3,c(16:22)]
cor_uw_age=cor(x_uw_age,y_uw)
plot(age_amp,amp_means[2,]) #plot of age and uh mean loc
x_uh_age=age_amp[c(1:11,14:22)]
y_uh=amp_means[2,c(1:11,14:22)]
cor_uh_age=cor(x_uh_age,y_uh)
cor_uh_age
cor_uw_age
cor_uw_age=rcor(x_uw_age,y_uw)
cor_uw_age=rcorr(x_uw_age,y_uw)
cor_uw_age
cor.test(x_uw_age,y_uw)
cor_aw_age=cor.test(x_aw_age,y_aw)
cor_uh_age=cor.test(x_uh_age,y_uh)
cor_uw_age=cor.test(x_uw_age,y_uw)
cor.test(x_aw_age,y_aw)
cor.test(x_uh_age,y_uh)
cor.test(x_uw_age,y_uw)
plot(age_amp,amp_means[3,]) #plot of age and uw mean loc
plot(age_amp,amp_means[2,]) #plot of age and uh mean loc
plot(age_amp,amp_means[2,]) #plot of age and uh mean loc
abline(lm(x_uh_age~y_uh=amp), col="red")
plot(age_amp,amp_means[2,]) #plot of age and uh mean loc
abline(lm(x_uh_age~y_uh), col="red")
abline(lm(x_uh_age~y_uh), col="red")
plot(age_amp,amp_means[2,]) #plot of age and uh mean loc
abline(lm(x_uh_age~y_uh), col="red")
plot(age_amp,amp_means[2,])
abline(lm(x_uh_age~y_uh), col="red")
abline(lm(x_uh_age~y_uh), col="red")
abline(lm(x_uh_age~y_uh), col="red")
abline(lm(y_uh~x_uh_age), col="red")
x_uw_age=age_amp[c(16:22)]
y_uw=amp_means[3,c(16:22)]
cor_uw_age=cor.test(x_uw_age,y_uw)
plot(age_amp,amp_means[3,]) #plot of age and uw mean loc
abline(lm(y_aw~x_aw_age), col="red")
x_uh_age=age_amp[c(1:11,14:22)]
y_uh=amp_means[2,c(1:11,14:22)]
cor_uh_age=cor.test(x_uh_age,y_uh)
plot(age_amp,amp_means[2,]) #plot of age and uh mean loc
abline(lm(y_uh~x_uh_age), col="red")
x_aw_age=age_amp[12:22]
y_aw=amp_means[1,12:22]
cor_aw_age=cor.test(x_aw_age,y_aw)
plot(age_amp,amp_means[1,]) #plot of age and aw mean loc
abline(lm(y_aw~x_aw_age), col="red")
abline(lm(y_aw~x_aw_age), col="red")
setwd("~/Desktop/Locognosia/Analysis_NB/R")
save.image("~/Desktop/Locognosia/Analysis_NB/R/loc_amp.RData")
load("~/Desktop/Locognosia/Analysis_NB/R/loc_amp.RData")
Within Amputees Affected Wrist versus Unaffected Wrist (Paired T test)
<<echo=T>>=
x
psych(x)
describe(x)
levels(control$initials)
contdemo=read.table("control_demog.csv",header=T,sep=",")
contdemo=read.table("control_demog.csv",header=T,sep=",")
cont_means
cont_means=tapply(control$mm,list(control$ah_uh_control,control$initials),mean,NA.RM=T)
cont_,eams
cont_,means
cont_means
cont_means=tapply(control$mm,list(control$ah_uh_control,control$initials),mean,NA.RM=TRUE)
cont_means
mean(control$mm[control$initials=="C08"])
mean(control$mm[control$initials=="C08"],na.rm=T)
cont_means=tapply(control$mm,list(control$ah_uh_control,control$initials),mean,na.rm=TRUE)
cont_means
cont_hands=cont_means[1,] #store hand means in a variable
cont_hands
save.image("~/Desktop/Locognosia/Analysis_NB/R/loc_amp.RData")
contr_age=contdemo$age
contr$age
cont$age
contr_age
describe(contr_age,na.rm=T)
save.image("~/Desktop/Locognosia/Analysis_NB/R/loc_amp.RData")
ampdemo=read.table("AmputeeDemographic.csv",header=T,sep=",")
ampdemo
table(ampdemo$gender)
table(contdemo$gender)
cor_uw_age
cor_uh_age
cor_uw_age
amp_means
cor_uw_age
cor_uh_age
cor_aw_age
age_amp=c(42,62,46,58,43,67,31,64,43,56,56,47,61,55,38,52,29,37,20,65,32,50)
age_amp=c(42,62,46,58,43,67,31,64,43,56,56,47,61,55,38,52,29,37,20,65,32,50)
x_aw_age=age_amp[12:22]
y_aw=amp_means[1,12:22]
cor_aw_age=cor.test(x_aw_age,y_aw)
plot(age_amp,amp_means[1,]) #plot of age and aw mean loc
abline(lm(y_aw~x_aw_age), col="red")
x_uh_age=age_amp[c(1:11,14:22)]
y_uh=amp_means[2,c(1:11,14:22)]
cor_uh_age=cor.test(x_uh_age,y_uh)
plot(age_amp,amp_means[2,]) #plot of age and uh mean loc
abline(lm(y_uh~x_uh_age), col="red")
x_uw_age=age_amp[c(16:22)]
y_uw=amp_means[3,c(16:22)]
cor_uw_age=cor.test(x_uw_age,y_uw)
plot(age_amp,amp_means[3,]) #plot of age and uw mean loc
abline(lm(y_aw~x_aw_age), col="red")
save.image("~/Desktop/Locognosia/Analysis_NB/R/loc_amp.RData")
save.image("~/Desktop/Locognosia/Analysis_NB/R/loc_amp.RData")
load("~/Desktop/Locognosia/Analysis_NB/R/loc_data.RData")
setwd("~/Desktop/Locognosia/Analysis_NB/R")
require(lsr)
require(Hmisc)
require(ggplot2)
require(psych)
patient=read.table("master_repltrans.csv",header=T,sep=",")
control=read.table("master_control.csv",header=T,sep=",")
levels(patient$ah_uh)=c("Affected Hand","Unaffected Hand")
levels(patient$ah_uh_control)=c("Affected Hand","Unaffected Hand")
levels(control$ah_uh)=c("Affected Hand", "Unaffected Hand")
levels(control$ah_uh_control)=c("Unaffected Hand")
pat_cont=rbind(patient,control)
pat_cont$init2=factor(pat_cont$init2)
control=read.table("master_control.csv",header=T,sep=",")
patient=read.table("master_repltrans.csv",header=T,sep=",")
patient=read.table("master_repltrans.csv",header=T,sep=",")
control=read.table("master_control.csv",header=T,sep=",")
levels(patient$ah_uh)=c("Affected Hand","Unaffected Hand")
levels(patient$ah_uh_control)=c("Affected Hand","Unaffected Hand")
levels(control$ah_uh)=c("Affected Hand", "Unaffected Hand")
levels(control$ah_uh_control)=c("Unaffected Hand")
pat_cont=rbind(patient,control)
pat_cont$init2=factor(pat_cont$init2)
ggplot(patient, aes(x=factor(loc),y=mm,fill=ah_uh_control))+theme_bw()+coord_cartesian(ylim=c(0,105)) +
geom_boxplot()+scale_y_continuous(breaks=seq(0,110,by=10))+xlab("Locations")+ylab("Measurement\n(mm)")+theme(legend.title=element_blank(),legend.position="top",axis.text.x = element_text(angle = 0, hjust = .5, size=12,color="black"),axis.title.x = element_text(size = 12, angle = 00),axis.title.y = element_text(size = 12, angle = 90),legend.margin = unit(0, "cm"),legend.key.size=unit(1.2,"cm"),legend.text=element_text(size=12))+ scale_fill_brewer(palette="Dark2")
ggplot(pat_cont, aes(x=factor(init2),y=mm,fill=ah_uh_control))+theme_bw()+theme(panel.grid.major = element_line(colour = "#808080"))+coord_cartesian(ylim=c(0,120))+
geom_rect(data=NULL,aes(xmin=-Inf,xmax=Inf,ymin=-Inf,ymax=Inf), fill="gray100",alpha=.02)+geom_rect(data=NULL,aes(xmin=1.5,xmax=5.5,ymin=-Inf,ymax=Inf), fill="gray95",alpha=.05)+
stat_boxplot(geom ='errorbar',size=1.25)+geom_boxplot()+ylab("Error\n(mm)")+xlab("Participants")+
theme(panel.grid.major = element_line(colour = "black"),legend.title=element_blank(),legend.text = element_text(angle = 0, size = 14, face = 'bold'),legend.position="top",axis.text.x = element_text(angle = 0, hjust = .5, size=14,color="black",face='bold'),axis.title.x = element_text(size = 14, angle = 00, face='bold'),axis.title.y = element_text(size = 14, angle = 90,face='bold'),axis.text.y = element_text(size = 14, angle = 0,face='bold'),legend.margin = unit(0, "cm"),legend.key.size=unit(1.2,"cm"),legend.text=element_text(size=14))+
scale_y_continuous(breaks=seq(0,120,by=10))+ scale_fill_brewer(palette="Greys")+
annotate("text", x = 1, y = 38, label = "",size=6)+ annotate("text", x = 11, y = 38, label = "",size=6, fontface="bold")+xlim("Controls","CH","JS","PP","RW","DR1","DR2","DR3","DR4","DR5","EH1","EH2","GF","MS")
ggplot(pat_cont, aes(x=factor(init2),y=mm,fill=ah_uh_control))+theme_bw()+theme(panel.grid.major = element_line(colour = "#808080"))+coord_cartesian(ylim=c(0,120))+
geom_rect(data=NULL,aes(xmin=-Inf,xmax=Inf,ymin=-Inf,ymax=Inf), fill="gray100",alpha=.02)+geom_rect(data=NULL,aes(xmin=1.5,xmax=5.5,ymin=-Inf,ymax=Inf), fill="gray95",alpha=.05)+
stat_boxplot(geom ='errorbar',size=1.25)+geom_boxplot()+ylab("Error\n(mm)")+xlab("Participants")+
theme(panel.grid.major = element_line(colour = "black"),legend.title=element_blank(),legend.text = element_text(angle = 0, size = 14, face = 'bold'),legend.position="top",axis.text.x = element_text(angle = 0, hjust = .5, size=14,color="black",face='bold'),axis.title.x = element_text(size = 14, angle = 00, face='bold'),axis.title.y = element_text(size = 14, angle = 90,face='bold'),axis.text.y = element_text(size = 14, angle = 0,face='bold'),legend.margin = unit(0, "cm"),legend.key.size=unit(1.2,"cm"),legend.text=element_text(size=14))+
scale_y_continuous(breaks=seq(0,120,by=10))+ scale_fill_brewer(palette="Greys")+
annotate("text", x = 1, y = 38, label = "",size=6)+ annotate("text", x = 11, y = 38, label = "",size=6, fontface="bold")+xlim("Controls","CH","JS","PP","RW","DR1","DR2","DR3","DR4","DR5","DR6","EH1","EH2","GF","MS")
ggplot(pat_cont, aes(x=factor(init2),y=mm_miss,fill=ah_uh_control))+theme_bw()+theme(panel.grid.major = element_line(colour = "#808080"))+coord_cartesian(ylim=c(0,120))+
geom_rect(data=NULL,aes(xmin=-Inf,xmax=Inf,ymin=-Inf,ymax=Inf), fill="gray100",alpha=.02)+geom_rect(data=NULL,aes(xmin=1.5,xmax=5.5,ymin=-Inf,ymax=Inf), fill="gray95",alpha=.05)+
stat_boxplot(geom ='errorbar',size=1.25)+geom_boxplot()+ylab("Error\n(mm)")+xlab("Participants")+
theme(panel.grid.major = element_line(colour = "black"),legend.title=element_blank(),legend.text = element_text(angle = 0, size = 14, face = 'bold'),legend.position="top",axis.text.x = element_text(angle = 0, hjust = .5, size=14,color="black",face='bold'),axis.title.x = element_text(size = 14, angle = 00, face='bold'),axis.title.y = element_text(size = 14, angle = 90,face='bold'),axis.text.y = element_text(size = 14, angle = 0,face='bold'),legend.margin = unit(0, "cm"),legend.key.size=unit(1.2,"cm"),legend.text=element_text(size=14))+
scale_y_continuous(breaks=seq(0,120,by=10))+ scale_fill_brewer(palette="Greys")+
annotate("text", x = 1, y = 38, label = "",size=6)+ annotate("text", x = 11, y = 38, label = "",size=6, fontface="bold")+xlim("Controls","CH","JS","PP","RW","DR1","DR2","DR3","DR4","DR5","DR6","EH1","EH2","GF","MS")
ggplot(pat_cont, aes(x=factor(init2),y=mm,fill=ah_uh_control))+theme_bw()+theme(panel.grid.major = element_line(colour = "#808080"))+coord_cartesian(ylim=c(0,120))+
geom_rect(data=NULL,aes(xmin=-Inf,xmax=Inf,ymin=-Inf,ymax=Inf), fill="gray100",alpha=.02)+geom_rect(data=NULL,aes(xmin=1.5,xmax=5.5,ymin=-Inf,ymax=Inf), fill="gray95",alpha=.05)+
stat_boxplot(geom ='errorbar',size=1.25)+geom_boxplot()+ylab("Error\n(mm)")+xlab("Participants")+
theme(panel.grid.major = element_line(colour = "black"),legend.title=element_blank(),legend.text = element_text(angle = 0, size = 14, face = 'bold'),legend.position="top",axis.text.x = element_text(angle = 0, hjust = .5, size=14,color="black",face='bold'),axis.title.x = element_text(size = 14, angle = 00, face='bold'),axis.title.y = element_text(size = 14, angle = 90,face='bold'),axis.text.y = element_text(size = 14, angle = 0,face='bold'),legend.margin = unit(0, "cm"),legend.key.size=unit(1.2,"cm"),legend.text=element_text(size=14))+
scale_y_continuous(breaks=seq(0,120,by=10))+ scale_fill_brewer(palette="Greys")+
annotate("text", x = 1, y = 38, label = "",size=6)+ annotate("text", x = 11, y = 38, label = "",size=6, fontface="bold")+xlim("Controls","CH","JS","PP","RW","DR1","DR2","DR3","DR4","DR5","DR6","EH1","EH2","GF","MS")
ggplot(pat_cont, aes(x=factor(init2),y=mm,fill=ah_uh_control))+theme_bw()+theme(panel.grid.major = element_line(colour = "#808080"))+coord_cartesian(ylim=c(0,120))+
geom_rect(data=NULL,aes(xmin=-Inf,xmax=Inf,ymin=-Inf,ymax=Inf), fill="gray100",alpha=.02)+geom_rect(data=NULL,aes(xmin=1.5,xmax=5.5,ymin=-Inf,ymax=Inf), fill="gray95",alpha=.05)+
stat_boxplot(geom ='errorbar',size=1.25)+geom_boxplot()+ylab("Error\n(mm)")+xlab("Participants")+
theme(panel.grid.major = element_line(colour = "black"),legend.title=element_blank(),legend.text = element_text(angle = 0, size = 14, face = 'bold'),legend.position="top",axis.text.x = element_text(angle = 0, hjust = .5, size=14,color="black",face='bold'),axis.title.x = element_text(size = 14, angle = 00, face='bold'),axis.title.y = element_text(size = 14, angle = 90,face='bold'),axis.text.y = element_text(size = 14, angle = 0,face='bold'),legend.margin = unit(0, "cm"),legend.key.size=unit(1.2,"cm"),legend.text=element_text(size=14))+
scale_y_continuous(breaks=seq(0,120,by=10))+ scale_fill_brewer(palette="Greys")+
annotate("text", x = 1, y = 38, label = "",size=6)+ annotate("text", x = 11, y = 38, label = "",size=6, fontface="bold")+xlim("Controls","CH","JS","PP","RW","DR1","DR2","DR3","DR4","DR5","DR6","EH1","EH2","GF","MS")
q
library(zoo)
setwd("/Volumes/Storage/freylab_projects/exp62_transplant/62-02_optotrak/DATA_edit_N_B/Scripts")
source("MoCapFunctions.R")
setwd("~/Documents/DATA_edit_N_B/InProgress/03_25")
optoimport("03_25")
Hz=rep(c(1:500),102)
keepers=data.frame(Hz,keepers)
rm(Hz)
#Enter the participant number... "03_32", etc. Make sure you have set your working directory to the participants folder in the InProgress directory
optoimport("03_25")
#creates a Hz vector and add it to the data frame for interpolation purposes
Hz=rep(c(1:500),102)
keepers=data.frame(Hz,keepers)
rm(Hz)
#clean, replaces 100000 missing data values with "NA"
clean=keepers
clean[clean==100000]<-"NA"
optoimport("03_25")
#----Packages Required (No Entry Required)----
library(zoo)
setwd("/Volumes/Storage/freylab_projects/exp62_transplant/62-02_optotrak/DATA_edit_N_B/Scripts")
source("MoCapFunctions.R")
setwd("~/Documents/DATA_edit_N_B/InProgress/03_25")
optoimport("03_25")
Hz=rep(c(1:500),102)
keepers=data.frame(Hz,keepers)
rm(Hz)
clean=keepers
clean[clean==100000]<-"NA"
optoLog=read.table("03_25_optoReplant.txt",header=F,sep="")
x=length(optoLog$V1)
translation=c(rep(0,x))
optoLog=cbind(translation,optoLog)
optoLog$V1 = factor(optoLog$V1)
optoLog$translation=as.character(optoLog$translation)
for (i in 1:x){
if(optoLog$V1[i]==10){
optoLog$translation[i] <- "LH Block Start"}
if(optoLog$V1[i]==11){
optoLog$translation[i] <- "RH Block Start"}
if(optoLog$V1[i]==12){
optoLog$translation[i] <- "Visible Block Start"}
if(optoLog$V1[i]==13){
optoLog$translation[i] <- "Hidden Block Start"}
if(optoLog$V1[i]==30){
optoLog$translation[i] <- "ERROR: lifted during loading/checking"}
if(optoLog$V1[i]==31){
optoLog$translation[i] <- "ERROR: no lift in 3s after stimulus"}
if(optoLog$V1[i]==32){
optoLog$translation[i] <- "ERROR: lifted wrong hand during move"}
if(optoLog$V1[i]==33){
optoLog$translation[i] <- "ERROR: lifted wrong hand during stimulus presentation"}
if(optoLog$V1[i]==61){
optoLog$translation[i] <- "move epoch: 1cm cube"}
if(optoLog$V1[i]==62){
optoLog$translation[i] <- "move epoch: 2cm cube"}
if(optoLog$V1[i]==63){
optoLog$translation[i] <- "move epoch: 3cm cube"}
if(optoLog$V1[i]==80){
optoLog$translation[i] <- "trial finished okay"}
if(optoLog$V1[i]==90){
optoLog$translation[i] <- "experimenter confirmed"}
if(optoLog$V1[i]==91){
optoLog$translation[i] <- "experimenter denied"}
if(optoLog$V1[i]==92){
optoLog$translation[i] <- "experimenter aborted"}
if(optoLog$V1[i]==93){
optoLog$translation[i] <- "auto denial"}
if(optoLog$V1[i]==91){
optoLog$translation[i] <- "experimenter denied"}
if(optoLog$V1[i]==100){
optoLog$translation[i] <- "end of block"}
}
View(optoLog)
View(optoLog)
View(keepers)
class(keepers$optotrak.pulse.number)
levels(keepers$optotrak.pulse.number)
102/4
View(clean)
View(optoLog)
View(clean)
View(optoLog)
write.csv(clean,file="clean.csv",row.names=F)
write.csv(optoLog,file="optoLog.csv",row.names=F)
#import presentation output log to determine good trials
optoLog=read.table("03_25_optoReplant.txt",header=F,sep="")
x=length(optoLog$V1)
translation=c(rep(0,x))
TimeSec=c(rep(0,x))
TimeAbsolute=c(rep(0,x))
optoLog=cbind(translation,optoLog,TimeSec,TimeAbsolute)
optoLog$V1 = factor(optoLog$V1)
optoLog$translation=as.character(optoLog$translation)
View(optoLog)
optoLog$TimeSec=optoLog$V2/1000
View(optoLog)
for (i in 1:x){
if(optoLog$V1[i]==10){
optoLog$translation[i] <- "LH Block Start"}
if(optoLog$V1[i]==11){
optoLog$translation[i] <- "RH Block Start"}
if(optoLog$V1[i]==12){
optoLog$translation[i] <- "Visible Block Start"}
if(optoLog$V1[i]==13){
optoLog$translation[i] <- "Hidden Block Start"}
if(optoLog$V1[i]==30){
optoLog$translation[i] <- "ERROR: lifted during loading/checking"}
if(optoLog$V1[i]==31){
optoLog$translation[i] <- "ERROR: no lift in 3s after stimulus"}
if(optoLog$V1[i]==32){
optoLog$translation[i] <- "ERROR: lifted wrong hand during move"}
if(optoLog$V1[i]==33){
optoLog$translation[i] <- "ERROR: lifted wrong hand during stimulus presentation"}
if(optoLog$V1[i]==61){
optoLog$translation[i] <- "move epoch: 1cm cube"}
if(optoLog$V1[i]==62){
optoLog$translation[i] <- "move epoch: 2cm cube"}
if(optoLog$V1[i]==63){
optoLog$translation[i] <- "move epoch: 3cm cube"}
if(optoLog$V1[i]==80){
optoLog$translation[i] <- "trial finished okay"}
if(optoLog$V1[i]==90){
optoLog$translation[i] <- "experimenter confirmed"}
if(optoLog$V1[i]==91){
optoLog$translation[i] <- "experimenter denied"}
if(optoLog$V1[i]==92){
optoLog$translation[i] <- "experimenter aborted"}
if(optoLog$V1[i]==93){
optoLog$translation[i] <- "auto denial"}
if(optoLog$V1[i]==91){
optoLog$translation[i] <- "experimenter denied"}
if(optoLog$V1[i]==100){
optoLog$translation[i] <- "end of block"}
}
View(optoLog)
write.csv(optoLog,file="optoLog.csv",row.names=F)
View(optoLog)
